{"version":3,"sources":["images/trash.svg","images/cardTitle.svg","images/cardDescription.svg","images/actions.svg","utilities/Enums.ts","utilities/Utilities.ts","components/Card.tsx","utilities/Axios.ts","components/Column.tsx","components/CardDetails.tsx","components/LoginSignup.tsx","components/CustomDragLayer.tsx","App.tsx","index.js"],"names":["module","exports","Path","swal","Swal","mixin","customClass","popup","title","confirmButton","cancelButton","buttonsStyling","Card","props","ref","useRef","cardRef","history","useHistory","useState","isDragging","setIsDragging","displayDroppableCardAbove","setDisplayDroppableCardAbove","displayDroppableCardBelow","setDisplayDroppableCardBelow","useDrag","item","type","card","collect","monitor","current","cardHeight","clientHeight","setCardHeight","id","begin","setIsDragInProgress","setDragCardId","setHighlightedCardId","end","drag","preview","useEffect","getEmptyImage","captureDraggingState","useDrop","accept","drop","setTimeout","setHoverCardId","oldCard","columnIndex","newCard","column_id","isNew","moveCard","hover","_item","isOver","initialOffset","getInitialClientOffset","getClientOffset","y","highlightedCardId","style","height","dragCardHeight","className","hoverCardId","onMouseOver","isDragInProgress","onMouseLeave","onClick","push","replace","toString","dragCardId","instance","axios","create","baseURL","withCredentials","interceptors","response","use","error","errRes","config","url","status","fire","text","icon","includes","Promise","reject","get","a","data","post","Column","textarea","columnRef","displayCard","setDisplayCard","cardTitle","setCardTitle","column","columnTitle","setColumnTitle","displayDroppableLeftColumn","setDisplayDroppableLeftColumn","displayDroppableRightColumn","setDisplayDroppableRightColumn","cards","length","setColumnIndex","invisibleColumnHeight","setInvisibleColumnHeight","displayFirstPlaceholderCard","setDisplayFirstPlaceholderCard","columnIdAsString","el","document","getElementById","window","innerHeight","getBoundingClientRect","bottom","sortedCards","sort","x","columnHeight","setColumnHeight","setHighlightedColumnId","setDragColumnId","col","boardIndex","newColumn","moveColumn","addCard","columnId","setIsLoading","getColumnsAndCards","removeColumn","showCancelButton","confirmButtonText","value","highlightedColumnId","dragColumnHeight","inputRef","placeholder","onChange","e","target","onKeyDown","key","blur","onBlur","changeColumnTitle","src","TrashIcon","alt","map","i","cardId","autoFocus","preventDefault","handleKeyDownForCard","disabled","isLoading","dragColumnId","CardDetails","titleTextarea","descriptionTextarea","useParams","setCard","setTitle","description","setDescription","isEditingDescription","setIsEditingDescription","getCardAndSetState","useCallback","focus","handleOnBlur","refetchCards","removeCard","Home","Modal","show","onHide","animation","Header","closeButton","TitleIcon","Body","DescriptionIcon","minRows","ActionsIcon","LoginSignup","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","isLoggingIn","setIsLogginIn","isLoginDisabled","isSignupDisabled","isButtonDisabled","logIn","register","handleKeyPress","CustomDragLayer","useDragLayer","getInitialSourceClientOffset","currentOffset","getSourceClientOffset","getItem","itemType","getItemType","display","transform","WebkitTransform","getItemStyles","defaultValue","renderItem","App","setCards","columns","setColumns","Map","columnIdToHeightMap","setColumnIdToHeightMap","cardIdToHeightMap","setCardIdToHeightMap","isLoggedIn","setIsLoggedIn","getColumnsCardsAndSetState","colIds","join","getColumnsAndSetState","getCardsAndSetState","sortedColumns","useMemo","clonedCards","slice","newColumnCards","filter","splice","newCards","allCardsExceptOldCard","resetCards","unchangedCards","concat","cardData","addColumn","newTitle","oldColumnId","oldBoardIndex","clonedColumns","newColumns","logout","DndProvider","backend","Backend","columnCount","clone","set","path","ReactDOM","render","StrictMode"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,+ECA/BC,E,0JCECC,E,OAAOC,EAAKC,MAAM,CAC3BC,YAAa,CACTC,MAAO,UACPC,MAAO,aACPC,cAAe,2BACfC,aAAc,kBAElBC,gBAAgB,ICsBb,SAASC,EAAKC,GACjB,IAAMC,EAAMC,iBAAO,MACbC,EAAUD,iBAAY,MACtBE,EAAUC,cAHoB,EAKAC,oBAAS,GALT,mBAK7BC,EAL6B,KAKjBC,EALiB,OAM8BF,oBAAS,GANvC,mBAM7BG,EAN6B,KAMFC,EANE,OAO8BJ,oBAAS,GAPvC,mBAO7BK,EAP6B,KAOFC,EAPE,OASVC,YAAQ,CAC9BC,KAAM,CAAEC,KAAM,OAAQC,KAAMhB,EAAMgB,MAClCC,QAAS,SAAAC,GACL,GAAIA,EAAQX,aAAc,CACtB,GAAuB,MAAnBJ,EAAQgB,QAAiB,CACzB,IAAMC,EAAajB,EAAQgB,QAAQE,aAAe,EAClDrB,EAAMsB,cAActB,EAAMgB,KAAKO,GAAIH,GAEvCZ,GAAc,QAEdA,GAAc,GACdE,GAA6B,GAC7BE,GAA6B,IAGrCY,MAAO,WACHxB,EAAMyB,qBAAoB,GAC1BzB,EAAM0B,cAAc1B,EAAMgB,KAAKO,IAC/BvB,EAAM2B,qBAAqB3B,EAAMgB,KAAKO,KAE1CK,IAAK,kBAAM5B,EAAMyB,qBAAoB,MA7BL,mBAS3BI,EAT2B,KASrBC,EATqB,KAgCpCC,qBAAU,WACND,EAAQE,cAAiB,CAAEC,sBAAsB,MAClD,CAACH,IAlCgC,MAoCnBI,YAAQ,CACrBC,OAAQ,OACRC,KAAM,SAACtB,GACHuB,YAAW,kBAAMrC,EAAMsC,eAAexB,EAAKE,KAAKO,MAAK,IACrD,IAAMgB,EAAUzB,EAAKE,KACfwB,GAA4C,IAA9B/B,EACdT,EAAMgB,KAAKwB,YACXxC,EAAMgB,KAAKwB,YAAc,EAC3BC,EAAO,eAAQF,GACnBE,EAAO,eAAQF,EAAR,CAAiBG,UAAW1C,EAAMgB,KAAK0B,UAAWF,cAAaG,OAAO,IAC7E3C,EAAM4C,SAASH,EAASF,IAE5BM,MAAO,SAACC,EAAO5B,GACPA,EAAQ6B,UAAU/C,EAAM2B,qBAAqB3B,EAAMgB,KAAKO,IAE5D,IAAMyB,EAAgB9B,EAAQ+B,yBAC1B/B,EAAQgC,kBAAmBC,EAAIH,EAAeG,IAC9CzC,GAA6B,GAC7BE,GAA6B,IAE7BM,EAAQgC,kBAAmBC,EAAIH,EAAeG,IAC9CvC,GAA6B,GAC7BF,GAA6B,OAQzC,OAFAmB,GAAKO,EAhE+B,qBAgE1BnC,IAGN,yBAAKA,IAAKA,IACyB,IAA9BQ,GAAsCT,EAAMoD,oBAAsBpD,EAAMgB,KAAKO,KAAqB,IAAfhB,GAChF,yBAAK8C,MAAO,CAAEC,OAAQtD,EAAMuD,gBAAkBC,UAAU,qCAE5C,IAAfjD,GACG,yBACIN,IAAKE,EACLqD,UAAW,qBAAuBxD,EAAMyD,cAAgBzD,EAAMgB,KAAKO,GAAK,cAAgB,IACxFmC,YAAa,YAAuC,IAA3B1D,EAAM2D,kBAA4B3D,EAAMsC,eAAetC,EAAMgB,KAAKO,KAC3FqC,aAAc,kBAAM5D,EAAMsC,eAAe,IACzCuB,QAAS,kBAAMzD,EAAQ0D,KAAKzE,EAAKU,KAAKgE,QAAQ,MAAO/D,EAAMgB,KAAKO,GAAGyC,eACnE,+BAAsB,IAAfzD,GAAwBP,EAAMgB,KAAKrB,SAGlC,IAAfY,GAAuBP,EAAMoD,oBAAsBpD,EAAMiE,YACtD,yBAAKZ,MAAO,CAAEC,OAAQtD,EAAMuD,gBAAkBC,UAAU,uCAE7B,IAA9B7C,GAAsCX,EAAMoD,oBAAsBpD,EAAMgB,KAAKO,KAAqB,IAAfhB,GAChF,yBAAK8C,MAAO,CAAEC,OAAQtD,EAAMuD,gBAAkBC,UAAU,sC,SFpH5DnE,K,SAAAA,E,kBAAAA,M,iBGGN6E,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,4CACTC,iBAAiB,IAErBJ,EAASK,aAAaC,SAASC,KAAI,SAAAD,GAAQ,OAAIA,KAAU,SAAAE,GACrD,IAAMC,EAASD,EAAMF,SAiBrB,OAhBIG,IAC0B,sBAAtBA,EAAOC,OAAOC,KAAiD,MAAlBF,EAAOG,QACpDxF,EAAKyF,KAAK,CACNpF,MAAO,SACPqF,KAAM,yBACNC,KAAM,UAGY,mBAAtBN,EAAOC,OAAOC,KAA4B,CAAC,IAAK,KAAKK,SAASP,EAAOG,SACrExF,EAAKyF,KAAK,CACNpF,MAAO,SACPqF,KAAM,4BACNC,KAAM,WAIXE,QAAQC,OAAOV,MAGnB,IAAMW,EAAG,uCAAG,WAAUR,GAAV,eAAAS,EAAA,sEACQpB,EAASmB,IAAOR,GADxB,cACTL,EADS,yBAERA,EAASe,MAFD,2CAAH,sDAIHC,EAAI,uCAAG,WAAOX,EAAaU,GAApB,SAAAD,EAAA,sEAAyCpB,EAASsB,KAAKX,EAAKU,GAA5D,mFAAH,wD,iBCkBV,SAASE,EAAOzF,GACnB,IAAM0F,EAAWxF,iBAAY,MACvBD,EAAMC,iBAAO,MACbyF,EAAYzF,iBAAY,MAHU,EAKFI,oBAAS,GALP,mBAKjCsF,EALiC,KAKpBC,EALoB,OAMNvF,mBAAS,IANH,mBAMjCwF,EANiC,KAMtBC,EANsB,OAOFzF,mBAASN,EAAMgG,OAAOrG,OAPpB,mBAOjCsG,EAPiC,KAOpBC,EAPoB,OAQJ5F,oBAAS,GARL,mBAQjCC,EARiC,KAQrBC,EARqB,OAS4BF,oBAAS,GATrC,mBASjC6F,EATiC,KASLC,EATK,OAU8B9F,oBAAS,GAVvC,mBAUjC+F,EAViC,KAUJC,EAVI,OAWFhG,mBAASN,EAAMuG,MAAMC,QAXnB,mBAWjChE,EAXiC,KAWpBiE,EAXoB,OAYkBnG,mBAAS,GAZ3B,mBAYjCoG,EAZiC,KAYVC,EAZU,OAa8BrG,oBAAS,GAbvC,mBAajCsG,EAbiC,KAaJC,EAbI,KAelCC,GAAmB9G,EAAMgG,OAAOzE,GAAGyC,WAEzCjC,qBAAU,kBAAM0E,EAAezG,EAAMuG,MAAMC,UAAS,CAACxG,EAAMuG,QAE3DxE,qBAAU,WACN,IAAMgF,EAAKC,SAASC,eAAeH,IACnC,GAAU,MAANC,EAAY,CACZ,IAAMzD,EAAS4D,OAAOC,YAAcJ,EAAGK,wBAAwBC,OAAS,GACxEV,EAAyBrD,MAE9B,CAACwD,GAAkB9G,EAAMuG,QAE5B,IAAMe,GAActH,EAAMuG,MAAMgB,MAAK,SAACC,EAAGrE,GAAJ,OAAUqE,EAAEhF,YAAcW,EAAEX,YAAc,GAAK,KA3B5C,GA6Bd3B,YAAQ,CAC9BC,KAAM,CACFC,KAAM,SACNiF,OAAQhG,EAAMgG,OACdO,MAAOe,IAEXrG,QAAS,SAAAC,GACL,GAAIA,EAAQX,aAAc,CACtB,GAAyB,MAArBoF,EAAUxE,QAAiB,CAC3B,IAAMsG,EAAe9B,EAAUxE,QAAQE,aACvCrB,EAAM0H,gBAAgB1H,EAAMgG,OAAOzE,GAAIkG,GAE3CjH,GAAc,GACdR,EAAMyB,qBAAoB,QAE1BjB,GAAc,GACd4F,GAA8B,GAC9BE,GAA+B,GAC/BO,GAA+B,IAGvCrF,MAAO,WACHxB,EAAM2H,uBAAuB3H,EAAMgG,OAAOzE,IAC1CvB,EAAM4H,gBAAgB5H,EAAMgG,OAAOzE,KAEvCK,IAAK,kBAAM5B,EAAMyB,qBAAoB,MAtDD,qBA6B/BI,GA7B+B,MA6BzBC,GA7ByB,MAyDxCC,qBAAU,WACND,GAAQE,cAAiB,CAAEC,sBAAsB,MAClD,CAACH,KA3DoC,OA6DvBI,YAAQ,CACrBC,OAAQ,CAAC,SAAU,QACnBC,KAAM,SAACtB,GACH,GAAkB,WAAdA,EAAKC,KAAmB,CACxB,IAAM8G,EAAO/G,EAA0BkF,OACjC8B,GAA4C,IAA/B3B,EACbnG,EAAMgG,OAAO8B,WACb9H,EAAMgG,OAAO8B,WAAa,EAC5BC,EAAS,eAAQF,GACrBE,EAAS,eAAQA,EAAR,CAAmBD,aAAYnF,OAAO,IAC/C3C,EAAMgI,WAAWH,EAAItG,GAAIwG,EAAWF,EAAIC,YAG5C,GAAkB,SAAdhH,EAAKC,MAA0C,IAAvBf,EAAMuG,MAAMC,OAAc,CAClD,IAAMjE,EAAWzB,EAAwBE,KACzCqB,YAAW,kBAAMrC,EAAMsC,eAAeC,EAAQhB,MAAK,IACnD,IAAIkB,EAAO,eAAQF,GACnBE,EAAO,eAAQA,EAAR,CAAiBC,UAAW1C,EAAMgG,OAAOzE,GAAIiB,YAAa,EAAGG,OAAO,IAC3E3C,EAAM4C,SAASH,EAASF,KAGhCtB,QAAS,SAAAC,IACoB,IAArBA,EAAQ6B,UACR8D,GAA+B,IAGvChE,MAAO,SAAC/B,EAAyCI,GAC7C,GAAkB,WAAdJ,EAAKC,KAAmB,CACpBG,EAAQ6B,UAAU/C,EAAM2H,uBAAuB3H,EAAMgG,OAAOzE,IAEhE,IAAMyB,EAAgB9B,EAAQ+B,yBAC1B/B,EAAQgC,kBAAmBsE,EAAIxE,EAAewE,IAC9CpB,GAA8B,GAC9BE,GAA+B,IAE/BpF,EAAQgC,kBAAmBsE,EAAIxE,EAAewE,IAC9ClB,GAA+B,GAC/BF,GAA8B,IAIpB,SAAdtF,EAAKC,MAA0C,IAAvBf,EAAMuG,MAAMC,SACpCK,GAA+B,GAC/B7G,EAAM2B,qBAAqB,IAGb,SAAdb,EAAKC,MAA0C,IAAvBf,EAAMuG,MAAMC,QAAiB1F,EAAwBE,KAAK0B,YAAc1C,EAAMgG,OAAOzE,IAC7GvB,EAAM2B,qBAAsBb,EAAwBE,KAAKO,OA/C5Da,GA7D+B,qBAiHlC6F,GAAO,uCAAG,WAAOtI,GAAP,eAAA2F,EAAA,2DACR3F,EAAM6G,OAAS,GADP,wBAEFjB,EAAO,CACT5F,QACAuI,SAAUlI,EAAMgG,OAAOzE,GACvBiB,eAEJxC,EAAMmI,cAAa,GAPX,kBASE3C,EAAK,gBAAiBD,GATxB,uBAUEvF,EAAMoI,qBAVR,OAWJrC,EAAa,IACbU,EAAejE,EAAc,GAZzB,yBAcJxC,EAAMmI,cAAa,GAdf,qBAiBZtC,GAAe,GAjBH,8DAAH,sDAiCPwC,GAAY,uCAAG,sBAAA/C,EAAA,sEACMhG,EAAKyF,KAAK,CAC7BpF,MAAO,6CACPqF,KAAM,+CACNC,KAAM,UACNqD,kBAAkB,EAClBC,kBAAmB,oBANN,kBAQJC,MARI,wBASbxI,EAAMmI,cAAa,GATN,kBAWH3C,EAAK,mBAAqBxF,EAAMgG,OAAOzE,IAXpC,wBAYHvB,EAAMoI,qBAZH,QAaT9I,EAAKyF,KACD,WACA,8BACA,WAhBK,yBAmBT/E,EAAMmI,cAAa,GAnBV,2EAAH,qDA2BlB,OAFAtG,GAAKO,GAAKnC,IAGN,yBAAKA,IAAKA,EAAKuD,UAAU,WACW,IAA/B2C,GAAuCnG,EAAMyI,sBAAwBzI,EAAMgG,OAAOzE,KAAqB,IAAfhB,GACrF,yBAAK8C,MAAO,CAAEC,OAAQtD,EAAM0I,kBAAoBlF,UAAU,4BAE9D,8BACoB,IAAfjD,GACG,6BACI,yBAAKgB,GAAIuF,GAAkB7G,IAAK0F,EAAWnC,UAAU,UACjD,yBAAKA,UAAU,0DACX,kBAAC,IAAD,CACIzC,KAAK,OACL4H,SAAUjD,EACVlC,UAAU,eACVgF,MAAOvC,EACP2C,YAAY,sBACZC,SAAU,SAACC,GAAD,OAA4C5C,EAAe4C,EAAEC,OAAOP,QAC9EQ,UAAW,SAACF,GAxD5B,UAwDuFA,EAAEG,KAvDjGvD,EAASvE,QAAQ+H,QAwDOC,OAAQ,kBAAMnJ,EAAMoJ,kBAAkBpJ,EAAMgG,OAAOzE,GAAI0E,MAC3D,yBACIoD,IAAKC,IACLC,IAAI,cACJ1F,QAAS,kBAAMwE,SAEtBf,GAAYd,QAAU,IAAqC,IAAhCI,GACxB,yBAAKvD,MAAO,CAAEC,OAAQtD,EAAMuD,gBAAkBC,UAAU,sCAE3D8D,GAAYkC,KAAI,SAAChC,EAAGiC,GAAJ,OACb,kBAAC1J,EAAD,CACIkJ,IAAKQ,EACLzI,KAAMwG,EACNpE,kBAAmBpD,EAAMoD,kBACzBG,eAAgBvD,EAAMuD,eACtBU,WAAYjE,EAAMiE,WAClBN,iBAAkB3D,EAAM2D,iBACxBF,YAAazD,EAAMyD,YACnBnB,eAAgB,SAACoH,GAAD,OAAoB1J,EAAMsC,eAAeoH,IACzDjI,oBAAqB,SAAC+F,GAAD,OAAgBxH,EAAMyB,oBAAoB+F,IAC/D9F,cAAe,SAACgI,GAAD,OAAoB1J,EAAM0B,cAAcgI,IACvDpI,cAAe,SAACoI,EAAgBpG,GAAjB,OAAoCtD,EAAMsB,cAAcoI,EAAQpG,IAC/E3B,qBAAsB,SAACJ,GAAD,OAAQvB,EAAM2B,qBAAqBJ,IACzDqB,SAAU,SAACH,EAAgBF,GAAjB,OAAoCvC,EAAM4C,SAASH,EAASF,UAE7D,IAAhBqD,GACG,yBAAKpC,UAAU,iBACX,kBAAC,IAAD,CACIzC,KAAK,OACL4I,WAAS,EACTnG,UAAU,aACVgF,MAAO1C,EACP8C,YAAY,iCACZC,SAAU,SAACC,GAAD,OAA4C/C,EAAa+C,EAAEC,OAAOP,QAC5EQ,UAAW,SAACF,GAAD,OAtFlB,SAACA,GACZ,UAAVA,EAAEG,MACFH,EAAEc,iBACF3B,GAAQnC,IAmF6E+D,CAAqBf,IAC9EK,OAAQ,kBAAMlB,GAAQnC,OAGlC,4BACI/E,KAAK,SACLyC,UAAU,0CACVK,QAAS,YAA4B,IAAhB+B,GAAuBC,GAAe,IAC3DiE,UAA8B,IAApB9J,EAAM+J,WAJpB,SAKU,8BAA8B,IAAvB/J,EAAMuG,MAAMC,OAAe,IAAM,WALlD,UAQHxG,EAAMgK,eAAiBhK,EAAMgG,OAAOzE,KAAiC,IAA3BvB,EAAM2D,kBAC7C,yBAAKN,MAAO,CAAEC,OAAQoD,GAAyBlD,UAAU,uBAIrD,IAAfjD,GAAuBP,EAAMyI,sBAAwBzI,EAAMgK,cACxD,yBAAK3G,MAAO,CAAEC,OAAQtD,EAAM0I,kBAAoBlF,UAAU,yBAGjC,IAAhC6C,GAAwCrG,EAAMyI,sBAAwBzI,EAAMgG,OAAOzE,KAAqB,IAAfhB,GACtF,yBAAK8C,MAAO,CAAEC,OAAQtD,EAAM0I,kBAAoBlF,UAAU,6B,gECxRnE,SAASyG,EAAYjK,GACxB,IAAMkK,EAAgBhK,iBAAY,MAC5BiK,EAAsBjK,iBAAY,MAChCqB,EAAO6I,cAAP7I,GACFnB,EAAUC,cAJkC,EAM1BC,mBAAuB,MANG,mBAM3CU,EAN2C,KAMrCqJ,EANqC,OAOxB/J,mBAAS,IAPe,mBAO3CX,EAP2C,KAOpC2K,EAPoC,OAQZhK,mBAAS,IARG,mBAQ3CiK,EAR2C,KAQ9BC,EAR8B,OASMlK,oBAAS,GATf,mBAS3CmK,EAT2C,KASrBC,EATqB,KAW5CC,EAAqBC,sBAAW,sBAAC,4BAAAtF,EAAA,sEAChBD,EAAW,eAAiB9D,GADZ,OAC7BP,EAD6B,OAEnCqJ,EAAQrJ,GACRsJ,EAAStJ,EAAKrB,OACd6K,EAAexJ,EAAKuJ,aAJe,2CAKpC,CAAChJ,IAEJQ,qBAAU,WACN,sBAAC,sBAAAuD,EAAA,sEACSqF,IADT,0CAAD,KAGD,CAACA,IAEJ5I,qBAAU,YACuB,IAAzB0I,GAA+BN,EAAoBhJ,QAAQ0J,UAChE,CAACJ,IAEJ,IAQMK,EAAY,uCAAG,4BAAAxF,EAAA,yDACjBoF,GAAwB,GACH,IAAjB/K,EAAM6G,OAFO,yCAEc8D,EAAStJ,EAAMrB,QAF7B,cAGX4F,EAAO,CACT5F,QACA4K,YAAuD,IAA1CA,EAAYxG,QAAQ,MAAO,IAAIyC,OACtC,GACA+D,GAEVvK,EAAMmI,cAAa,GATF,kBAWP3C,EAAK,iBAAmBxE,EAAMO,GAAIgE,GAX3B,wBAYPoF,IAZO,yBAaP3K,EAAM+K,eAbC,yBAeb/K,EAAMmI,cAAa,GAfN,2EAAH,qDAmBZ6C,EAAU,uCAAG,sBAAA1F,EAAA,sEACQhG,EAAKyF,KAAK,CAC7BpF,MAAO,GACPqF,KAAM,6CACNC,KAAM,UACNqD,kBAAkB,EAClBC,kBAAmB,oBANR,kBAQFC,MARE,wBASXxI,EAAMmI,cAAa,GATR,kBAWD3C,EAAK,iBAAmBxE,EAAMO,IAX7B,wBAYDvB,EAAM+K,eAZL,QAaP3K,EAAQ2D,QAAQ1E,EAAK4L,MAbd,yBAePjL,EAAMmI,cAAa,GAfZ,2EAAH,qDAoBhB,OACI,kBAAC+C,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAhDH,kBAAMhL,EAAQ0D,KAAKzE,EAAK4L,OAgDAI,WAAW,GAC/C,kBAACH,EAAA,EAAMI,OAAP,CAAc9H,UAAU,6CAA6C+H,aAAW,GAC5E,yBAAKlC,IAAKmC,IAAWjC,IAAI,eACzB,kBAAC,IAAD,CACIxI,KAAK,OACL4H,SAAUuB,EACV1G,UAAU,kCACVgF,MAAO7I,EACPiJ,YAAY,sBACZC,SAAU,SAACC,GAAD,OAA4CwB,EAASxB,EAAEC,OAAOP,QACxEQ,UAAW,SAACF,GAvDZ,UAuD+EA,EAAEG,KAtDzFiB,EAAc/I,QAAQ+H,QAuDdC,OAAQ,kBAAM2B,QAEtB,kBAACI,EAAA,EAAMO,KAAP,CAAYjI,UAAU,oBAClB,yBAAKA,UAAU,6BACX,yBAAK6F,IAAKqC,IAAiBnC,IAAI,qBAC/B,0BAAM/F,UAAU,oBAAhB,gBAEoB,IAAvB+G,EAAY/D,SAAyC,IAAzBiE,GACzB,yBAAKjH,UAAU,6BAA6BK,QAAS,kBAAM6G,GAAwB,KAC/E,qEAGPH,EAAY/D,OAAS,IAA8B,IAAzBiE,GACvB,yBAAKjH,UAAU,0BAA0BK,QAAS,kBAAM6G,GAAwB,KAAQH,IAElE,IAAzBE,GACG,kBAAC,IAAD,CACI1J,KAAK,OACL4H,SAAUwB,EACV3G,UAAU,qCACVgF,MAAO+B,EACP1B,SAAU,SAACC,GAAD,OAA4C0B,EAAe1B,EAAEC,OAAOP,QAC9EW,OAAQ,kBAAM2B,KACda,QAAS,EACT/C,YAAY,uCAEpB,yBAAKpF,UAAU,kCACX,yBAAK6F,IAAKuC,IAAarC,IAAI,iBAC3B,0BAAM/F,UAAU,oBAAhB,YAEJ,4BACIA,UAAU,iCACVsG,UAA8B,IAApB9J,EAAM+J,UAChBlG,QAAS,kBAAMmH,MAHnB,YC/HT,SAASa,EAAY7L,GAA2B,IAAD,EAClBM,mBAAS,IADS,mBAC3CwL,EAD2C,KACjCC,EADiC,OAElBzL,mBAAS,IAFS,mBAE3C0L,EAF2C,KAEjCC,EAFiC,OAGJ3L,mBAAS,IAHL,mBAG3C4L,EAH2C,KAG1BC,EAH0B,OAIhB7L,oBAAS,GAJO,mBAI3CyJ,EAJ2C,KAIhC5B,EAJgC,OAKb7H,oBAAS,GALI,mBAK3C8L,EAL2C,KAK9BC,EAL8B,KAO5CC,EAAsC,IAApBR,EAAStF,QAAoC,IAApBwF,EAASxF,OACpD+F,GAAuC,IAApBD,GAAuD,IAA3BJ,EAAgB1F,OAC/DgG,IAAoC,IAAhBJ,GACA,IAApBE,GACqB,IAArBC,KACe,IAAdxC,EAGPhI,qBAAU,WAAQ,OAAO,kBAAMoG,GAAa,MAAU,CAAC4B,IAEvD,IAAM0C,EAAK,uCAAG,sBAAAnH,EAAA,6DACV6C,GAAa,GADH,kBAGA3C,EAAK,iBAAkB,CAAEsG,WAAUE,aAHnC,OAINhM,EAAMyM,QAJA,uBAMNtE,GAAa,GANP,uEAAH,qDAULuE,EAAQ,uCAAG,sBAAApH,EAAA,2DACT0G,EAASxF,OAAS,GADT,yCAEFlH,EAAKyF,KAAK,CACbpF,MAAO,SACPqF,KAAM,0DACNC,KAAM,WALD,UAST+G,IAAaE,EATJ,yCAUF5M,EAAKyF,KAAK,CACbpF,MAAO,SACPqF,KAAM,wCACNC,KAAM,WAbD,cAiBbkD,GAAa,GAjBA,kBAmBH3C,EAAK,oBAAqB,CAAEsG,WAAUE,aAnBnC,OAoBThM,EAAMyM,QApBG,uBAsBTtE,GAAa,GAtBJ,yEAAH,qDA0BRwE,EAAiB,SAAC1D,GACR,UAARA,IAAwC,IAArBuD,KACH,IAAhBJ,EAAuBK,IAAUC,MAIzC,OACI,yBAAKlJ,UAAU,kFACX,0BAAMA,UAAU,qBACZ,wBAAIA,UAAU,oCAAd,eACA,yBAAKA,UAAU,cACX,2BACIzC,KAAK,OACLyC,UAAU,eACVgF,MAAOsD,EACPjD,SAAU,SAAAC,GAAC,OAAIiD,EAAYjD,EAAEC,OAAOP,QACpCjH,GAAG,WACHqH,YAAY,iBACZkB,UAAwB,IAAdC,KAElB,yBAAKvG,UAAU,cACX,2BACIzC,KAAK,WACLyC,UAAU,eACVgF,MAAOwD,EACPnD,SAAU,SAAAC,GAAC,OAAImD,EAAYnD,EAAEC,OAAOP,QACpCjH,GAAG,WACHqH,YAAY,WACZkB,UAAwB,IAAdC,EACVf,UAAW,SAACF,IAAmE,IAAhBsD,GAAsBO,EAAe7D,EAAEG,UAE7F,IAAhBmD,GACG,yBAAK5I,UAAU,cACX,2BACIzC,KAAK,WACLyC,UAAU,eACVgF,MAAO0D,EACPrD,SAAU,SAAAC,GAAC,OAAIqD,EAAmBrD,EAAEC,OAAOP,QAC3CjH,GAAG,kBACHqH,YAAY,mBACZkB,UAAwB,IAAdC,EACVf,UAAW,SAACF,GAAD,OAA8C6D,EAAe7D,EAAEG,SAGtF,4BACIlI,KAAK,SACLyC,UAAU,sBACVsG,UAA+B,IAArB0C,EACV3I,QAAS,kBAAsB,IAAhBuI,EAAuBK,IAAUC,OAC/B,IAAhBN,EAAuB,SAAW,WAEvC,yBAAK5I,UAAU,qBACM,IAAhB4I,EACK,0BAAM5I,UAAU,uBAAhB,0BAA6D,0BAAMA,UAAU,aAAaK,QAAS,kBAAMwI,GAAc,KAA1D,iBAC7D,0BAAM7I,UAAU,uBAAhB,4BAA+D,0BAAMA,UAAU,aAAaK,QAAS,kBAAMwI,GAAc,KAA1D,mB,aC3G5EO,EAAkB,WAC3B,IADiC,EA2B7BC,aAAa,SAAA3L,GAAO,MAAK,CACzB8B,cAAe9B,EAAQ4L,+BACvBC,cAAe7L,EAAQ8L,wBACvBlM,KAAMI,EAAQ+L,UACdC,SAAUhM,EAAQiM,kBARlBnK,EAvB6B,EAuB7BA,cACA+J,EAxB6B,EAwB7BA,cACAjM,EAzB6B,EAyB7BA,KACAoM,EA1B6B,EA0B7BA,SAwCJ,OAAKpM,EAID,yBAAK0C,UAAU,+BACX,yBAAKH,MAtES,SAACL,EAA+B+J,GAClD,IAAK/J,IAAkB+J,EACnB,MAAO,CACHK,QAAS,QAHmE,IAO9E5F,EAASuF,EAATvF,EAAGrE,EAAM4J,EAAN5J,EAETqE,GAAKxE,EAAcwE,EACnBrE,GAAKH,EAAcG,EACnBqE,GAAKxE,EAAcwE,EACnBrE,GAAKH,EAAcG,EAEnB,IAAMkK,EAAS,oBAAgB7F,EAAhB,eAAwBrE,EAAxB,OACf,MAAO,CACHkK,YACAC,gBAAiBD,GAqDLE,CAAcvK,EAAe+J,IArC9B,WACf,OAAQG,GACJ,IAAK,SACD,OAAO,yBAAK1J,UAAU,4BAClB,yBAAKA,UAAU,0DACX,kBAAC,IAAD,CACIzC,KAAK,OACLyC,UAAU,eACVgK,aAAe1M,EAA0BkF,OAAOrG,MAChDiJ,YAAY,wBAChB,yBAAKS,IAAKC,IAAWC,IAAI,iBAE3BzI,EAA0ByF,MAAMiD,KAAI,SAAAhC,GAAC,OACnC,yBAAKyB,IAAKzB,EAAEjG,GAAIiC,UAAU,oBACtB,8BAAOgE,EAAE7H,WAGjB,4BACIoB,KAAK,SACLyC,UAAU,4BAFd,SAGU,8BAAmD,IAA3C1C,EAA0ByF,MAAMC,OAAe,IAAM,WAHvE,UAMR,IAAK,OACD,OAAO,yBAAKhD,UAAU,uDAClB,8BAAQ1C,EAAwBE,KAAKrB,QAE7C,QACI,OAAO,MAUN8N,KALF,MCiLAC,MA7Of,SAAa1N,GAAmB,IAAD,EACJM,mBAAkB,IADd,mBACvBiG,EADuB,KAChBoH,EADgB,OAEArN,mBAAoB,IAFpB,mBAEvBsN,EAFuB,KAEdC,EAFc,OAGwBvN,mBAAS,GAHjC,mBAGvBmI,EAHuB,KAGFd,EAHE,OAIoBrH,mBAAS,GAJ7B,mBAIvB8C,EAJuB,KAIJzB,EAJI,OAKwBrB,mBAAS,IAAIwN,KALrC,mBAKvBC,EALuB,KAKFC,EALE,OAMU1N,mBAAS,GANnB,mBAMvB0J,EANuB,KAMTpC,EANS,OAOMtH,mBAAS,GAPf,mBAOvB2D,EAPuB,KAOXvC,EAPW,OAQoBpB,mBAAS,IAAIwN,KARjC,mBAQvBG,EARuB,KAQJC,EARI,OASkB5N,oBAAS,GAT3B,mBASvBqD,EATuB,KASLlC,GATK,QAUMnB,mBAASN,EAAMmO,YAVrB,qBAUvBA,GAVuB,MAUXC,GAVW,SAWI9N,oBAAS,GAXb,qBAWvByJ,GAXuB,MAWZ5B,GAXY,SAYQ7H,mBAAS,GAZjB,qBAYvBmD,GAZuB,MAYVnB,GAZU,MAcxB+L,GAA0B,uCAAG,gCAAA/I,EAAA,sEACZD,EAAe,YADH,cAC5BuI,EAD4B,OAElCC,EAAWD,GACLU,EAASV,EACbpE,KAAI,SAAAhC,GAAC,OAAIA,EAAEjG,MACXgN,KAAK,KAL2B,SAMdlJ,EAAa,oBAAsBiJ,GANrB,OAM5B/H,EAN4B,OAOlCoH,EAASpH,GAPyB,2CAAH,qDAU1BiI,GAAqB,uCAAG,4BAAAlJ,EAAA,sEACPD,EAAe,YADR,OACvBuI,EADuB,OAE7BC,EAAWD,GAFkB,2CAAH,qDAKrBa,GAAmB,uCAAG,8BAAAnJ,EAAA,6DACrBgJ,EAASV,EACbpE,KAAI,SAAAhC,GAAC,OAAIA,EAAEjG,MACXgN,KAAK,KAHoB,SAIPlJ,EAAa,oBAAsBiJ,GAJ5B,OAIrB/H,EAJqB,OAK3BoH,EAASpH,GALkB,2CAAH,qDAQzBxE,qBAAU,WACT,sBAAC,sBAAAuD,EAAA,0DACmB,IAAf6I,GADJ,uBAEChG,IAAa,GAFd,kBAIQkG,KAJR,uBAMElG,IAAa,GANf,sEAAD,KAUE,CAACgG,KAEJ,IAAMO,GAAgBd,EAAQrG,MAAK,SAACC,EAAGrE,GAAJ,OAAUqE,EAAEM,WAAa3E,EAAE2E,WAAa,GAAK,KAE1EY,GAAmBiG,mBAAQ,kBAAMZ,EAAoB1I,IAAI2E,KAAgB,CAAC+D,EAAqB/D,IAE/FzG,GAAiBoL,mBAAQ,kBAAMV,EAAkB5I,IAAIpB,KAAc,CAACgK,EAAmBhK,IAEvFrB,GAAQ,uCAAG,WAAOH,EAAgBF,GAAvB,2BAAA+C,EAAA,6DACVsJ,EAAcrI,EAAMsI,SAEpBC,EAAiBF,EACrBG,QAAO,SAAAvH,GAAC,OAAIA,EAAE9E,YAAcD,EAAQC,aACpC6E,MAAK,SAACC,EAAGrE,GAAJ,OAAUqE,EAAEhF,YAAcW,EAAEX,YAAc,GAAK,MACvCwM,OAAOvM,EAAQD,YAAa,EAAGC,GACxCwM,EAAWH,EACfC,QAAO,SAAAvH,GAAC,QAAMA,EAAEjG,KAAOgB,EAAQhB,IAAMiG,EAAEhF,cAAgBD,EAAQC,aAAegF,EAAE9E,YAAcH,EAAQG,YAAc8E,EAAE7E,UACtH6G,KAAI,SAAChC,EAAGiC,GAAJ,sBAAgBjC,EAAhB,CAAmBhF,YAAaiH,OAEhCyF,EAAwBN,EAAYG,QAAO,SAAAvH,GAAC,QAAMA,EAAEjG,KAAOgB,EAAQhB,IAAMiG,EAAEhF,cAAgBD,EAAQC,aAAegF,EAAE9E,YAAcH,EAAQG,YAAc8E,EAAE7E,UAG5JwM,EAAsB,GACtB1M,EAAQC,YAAcH,EAAQG,YACjCyM,EAAaD,EACXH,QAAO,SAAAvH,GAAC,OAAIA,EAAE9E,YAAcH,EAAQG,WAAa8E,EAAEjG,KAAOgB,EAAQhB,MAClEgG,MAAK,SAACC,EAAGrE,GAAJ,OAAUqE,EAAEhF,YAAcW,EAAEX,YAAc,GAAK,KACpDgH,KAAI,SAAChC,EAAGiC,GAAJ,sBAAgBjC,EAAhB,CAAmBhF,YAAaiH,QAGjC2F,EAAiBF,EACrBH,QAAO,SAAAvH,GAAC,OAAIA,EAAE9E,YAAcD,EAAQC,aACpCqM,QAAO,SAAAvH,GAAC,OAAIA,EAAE9E,YAAcH,EAAQG,aACtCiL,EAASyB,EAAeC,OAAOJ,GAAUI,OAAOF,IAE1C5J,EAAO,CACZ+J,SAAUL,EAASI,OAAOF,IAE3BhH,IAAa,GA9BG,oBAgCT3C,EAAK,cAAeD,GAhCX,yBAiCTkJ,KAjCS,yBAmCftG,IAAa,GAnCE,4EAAH,wDAuCRoH,GAAS,uCAAG,4BAAAjK,EAAA,6DACXC,EAAO,CACZ5F,MAAO,GACPmI,WAAY8F,EAAQpH,QAErB2B,IAAa,GALI,kBAOV3C,EAAK,kBAAmBD,GAPd,uBAQViJ,KARU,uBAUhBrG,IAAa,GAVG,yEAAH,qDAcTiB,GAAiB,uCAAG,WAAO7H,EAAYiO,GAAnB,eAAAlK,EAAA,6DACnBC,EAAO,CACZhE,KACA5B,MAAO6P,GAERrH,IAAa,GALY,kBAOlB3C,EAAK,kBAAmBD,GAPN,uBAQlBiJ,KARkB,uBAUxBrG,IAAa,GAVW,yEAAH,wDAcjBH,GAAU,uCAAG,WAAOyH,EAAqB1H,EAAoB2H,GAAhD,qBAAApK,EAAA,sDAUlB,KATMqK,EAAgB/B,EACpBiB,QACAtH,MAAK,SAACC,EAAGrE,GAAJ,OAAUqE,EAAEM,WAAa3E,EAAE2E,WAAa,GAAK,MACtCkH,OAAOjH,EAAUD,WAAY,EAAGC,GACxC6H,EAAaD,EACjBZ,QAAO,SAAAvH,GAAC,QAAMA,EAAEjG,KAAOkO,GAAejI,EAAEM,aAAe4H,IAAkBlI,EAAE7E,UAC3E6G,KAAI,SAAChC,EAAGiC,GAAJ,sBAAgBjC,EAAhB,CAAmBM,WAAY2B,OACrCoE,EAAW+B,GACPrK,EAAO,GACFkE,EAAI,EAAGA,EAAImG,EAAWpJ,OAAQiD,IACtClE,EAAI,eAAQA,EAAR,eAAeqK,EAAWnG,GAAGlI,GAAKkI,IAXrB,OAalBtB,IAAa,GAbK,mBAeX3C,EAAK,gBAAiBD,GAfX,yBAgBXiJ,KAhBW,yBAkBjBrG,IAAa,GAlBI,2EAAH,0DAkCV0H,GAAM,uCAAG,sBAAAvK,EAAA,6DACd6C,IAAa,GADC,kBAGP9C,EAAI,mBAHG,OAIb+I,IAAc,GAJD,uBAMbjG,IAAa,GANA,uEAAH,qDAUZ,OACC,kBAAC,IAAD,MACiB,IAAfgG,GACE,6BACD,yBAAK3K,UAAU,eACd,wBAAIA,UAAU,kBAAd,eACA,4BACCA,UAAU,iCACVK,QAAS,kBAAMgM,MACf/F,UAAwB,IAAdC,IAHX,YAOD,kBAAC+F,EAAA,EAAD,CAAaC,QAASC,KACrB,kBAAC,EAAD,MACA,yBAAKxM,UAAU,oBACbkL,GAAclF,KAAI,SAAAhC,GAAC,OACnB,yBAAKyB,IAAKzB,EAAEjG,IACX,kBAACkE,EAAD,CACCO,OAAQwB,EACRiB,oBAAqBA,EACrBrF,kBAAmBA,EACnB4G,aAAcA,EACdtB,iBAAkBA,GAClBzE,WAAYA,EACZV,eAAgBA,GAChBI,iBAAkBA,EAClB4C,MAAOA,EAAMwI,QAAO,SAAA5L,GAAC,OAAIA,EAAET,YAAc8E,EAAEjG,MAC3CkC,YAAaA,GACbwM,YAAarC,EAAQpH,OACrBlE,eAAgB,SAACoH,GAAD,OAAoBpH,GAAeoH,IACnDjI,oBAAqB,SAAC+F,GAAD,OAAgB/F,GAAoB+F,IACzDlG,cAAe,SAACoI,EAAgBpG,GAAjB,OAhDF,SAACoG,EAAgBpG,GACtC,IAAM4M,EAAQ,IAAIpC,IAAIG,GACtBiC,EAAMC,IAAIzG,EAAQpG,GAClB4K,EAAqBgC,GA6CsC5O,CAAcoI,EAAQpG,IACzE5B,cAAe,SAACgI,GAAD,OAAoBhI,EAAcgI,IACjD9B,gBAAiB,SAACM,GAAD,OAAsBN,EAAgBM,IACvDR,gBAAiB,SAACQ,EAAkB5E,GAAnB,OAzDF,SAAC4E,EAAkB5E,GAC1C,IAAM4M,EAAQ,IAAIpC,IAAIC,GACtBmC,EAAMC,IAAIjI,EAAU5E,GACpB0K,EAAuBkC,GAsDwCxI,CAAgBQ,EAAU5E,IACjF8F,kBAAmB,SAAClB,EAAkBsH,GAAnB,OAAwCpG,GAAkBlB,EAAUsH,IACvF7H,uBAAwB,SAACpG,GAAD,OAAgBoG,EAAuBpG,IAC/DI,qBAAsB,SAACJ,GAAD,OAAgBI,EAAqBJ,IAC3DqB,SAAU,SAACH,EAAgBF,GAAjB,OAAoCK,GAASH,EAASF,IAChEyF,WAAY,SAACyH,EAAqB1H,EAAoB2H,GAA1C,OAAoE1H,GAAWyH,EAAa1H,EAAW2H,IACnHtH,mBAAoB,kBAAMiG,MAC1BlG,aAAc,SAACX,GAAD,OAAgBW,GAAaX,IAC3CuC,UAAWA,SAGd,6BACC,4BACChJ,KAAK,SACL8C,QAAS,kBAAM0L,MACf/L,UAAU,uCACVsG,UAAwB,IAAdC,IAJX,SAKO,8BAA0B,IAAnB6D,EAAQpH,OAAe,IAAM,WAL3C,aAWF,kBAACqF,EAAD,CAAaY,MAAO,kBAAM2B,IAAc,MAE3C,kBAAC,IAAD,CAAOgC,KAAM/Q,EAAKU,MACjB,kBAACkK,EAAD,CACCF,UAAWA,GACX5B,aAAc,SAACX,GAAD,OAAgBW,GAAaX,IAC3CuD,aAAc,kBAAM0D,WChPzB,sBAAC,4BAAAnJ,EAAA,sEACyBD,EAAI,uBAD7B,OACM8I,EADN,OAEAkC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,CAAKpC,WAAYA,KAElBnH,SAASC,eAAe,SANzB,0CAAD,K","file":"static/js/main.c9b4c59b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash.7a4837d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/cardTitle.7e6fdb34.svg\";","module.exports = __webpack_public_path__ + \"static/media/cardDescription.5c571a3f.svg\";","module.exports = __webpack_public_path__ + \"static/media/actions.e9bfb1ac.svg\";","export enum Path {\r\n    Home = '/',\r\n    Card = '/card/:id'\r\n}","import Swal from 'sweetalert2';\r\n\r\nexport const swal = Swal.mixin({\r\n    customClass: {\r\n        popup: 'swal-bg',\r\n        title: 'swal-title',\r\n        confirmButton: 'btn add-card-button mr-2',\r\n        cancelButton: 'btn btn-danger'\r\n    },\r\n    buttonsStyling: false\r\n});","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Path } from '../utilities/Enums';\r\n\r\ndeclare interface ICardProps {\r\n    readonly card: ICard;\r\n    readonly dragCardHeight: number;\r\n    readonly dragCardId: number;\r\n    readonly isDragInProgress: boolean;\r\n\r\n    /** determines which card is being hovered over while NOT dragging */\r\n    readonly hoverCardId: number;\r\n\r\n    /** determines which card is being hovered over while dragging */\r\n    readonly highlightedCardId: number;\r\n\r\n    readonly setHoverCardId: (cardId: number) => void;\r\n    readonly setDragCardId: (cardId: number) => void;\r\n    readonly setCardHeight: (cardId: number, height: number) => void;\r\n    readonly moveCard: (newCard: ICard, oldCard: ICard) => void;\r\n    readonly setHighlightedCardId: (cardId: number) => void;\r\n    readonly setIsDragInProgress: (x: boolean) => void;\r\n}\r\n\r\nexport interface IDraggableCard {\r\n    readonly type: string;\r\n    readonly card: ICard;\r\n}\r\n\r\nexport function Card(props: ICardProps) {\r\n    const ref = useRef(null);\r\n    const cardRef = useRef<any>(null);\r\n    const history = useHistory();\r\n\r\n    const [isDragging, setIsDragging] = useState(false);\r\n    const [displayDroppableCardAbove, setDisplayDroppableCardAbove] = useState(false);\r\n    const [displayDroppableCardBelow, setDisplayDroppableCardBelow] = useState(false);\r\n\r\n    const [, drag, preview] = useDrag({\r\n        item: { type: 'card', card: props.card },\r\n        collect: monitor => {\r\n            if (monitor.isDragging()) {\r\n                if (cardRef.current != null) {\r\n                    const cardHeight = cardRef.current.clientHeight + 2;\r\n                    props.setCardHeight(props.card.id, cardHeight);\r\n                }\r\n                setIsDragging(true);\r\n            } else {\r\n                setIsDragging(false);\r\n                setDisplayDroppableCardAbove(false);\r\n                setDisplayDroppableCardBelow(false);\r\n            }\r\n        },\r\n        begin: () => {\r\n            props.setIsDragInProgress(true);\r\n            props.setDragCardId(props.card.id);\r\n            props.setHighlightedCardId(props.card.id);\r\n        },\r\n        end: () => props.setIsDragInProgress(false)\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true });\r\n    }, [preview]);\r\n\r\n    const [, drop] = useDrop({\r\n        accept: 'card',\r\n        drop: (item: IDraggableCard) => {\r\n            setTimeout(() => props.setHoverCardId(item.card.id), 50);\r\n            const oldCard = item.card;\r\n            const columnIndex = displayDroppableCardAbove === true\r\n                ? props.card.columnIndex\r\n                : props.card.columnIndex + 1;\r\n            let newCard = { ...oldCard };\r\n            newCard = { ...oldCard, column_id: props.card.column_id, columnIndex, isNew: true };\r\n            props.moveCard(newCard, oldCard);\r\n        },\r\n        hover: (_item, monitor) => {\r\n            if (monitor.isOver()) props.setHighlightedCardId(props.card.id);\r\n\r\n            const initialOffset = monitor.getInitialClientOffset();\r\n            if (monitor.getClientOffset()!.y < initialOffset!.y) {\r\n                setDisplayDroppableCardAbove(true);\r\n                setDisplayDroppableCardBelow(false);\r\n            }\r\n            if (monitor.getClientOffset()!.y > initialOffset!.y) {\r\n                setDisplayDroppableCardBelow(true);\r\n                setDisplayDroppableCardAbove(false);\r\n            }\r\n        }\r\n    });\r\n\r\n    // allows for the Card component to be both dragged and dropped on\r\n    drag(drop(ref));\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            {displayDroppableCardAbove === true && props.highlightedCardId === props.card.id && isDragging === false &&\r\n                <div style={{ height: props.dragCardHeight }} className='card trello-card droppable-card'></div>\r\n            }\r\n            {isDragging === false &&\r\n                <div\r\n                    ref={cardRef}\r\n                    className={'card trello-card ' + (props.hoverCardId === props.card.id ? 'active-card' : '')}\r\n                    onMouseOver={() => { if (props.isDragInProgress === false) props.setHoverCardId(props.card.id) }}\r\n                    onMouseLeave={() => props.setHoverCardId(0)}\r\n                    onClick={() => history.push(Path.Card.replace(':id', props.card.id.toString()))}>\r\n                    <span>{isDragging === false && props.card.title}</span>\r\n                </div>\r\n            }\r\n            {isDragging === true && props.highlightedCardId === props.dragCardId &&\r\n                <div style={{ height: props.dragCardHeight }} className='card trello-card placeholder-card'></div>\r\n            }\r\n            {displayDroppableCardBelow === true && props.highlightedCardId === props.card.id && isDragging === false &&\r\n                <div style={{ height: props.dragCardHeight }} className='card trello-card droppable-card'></div>\r\n            }\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\nimport { swal } from '../utilities/Utilities';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://kanban-lite-backend.herokuapp.com',\r\n    withCredentials: true\r\n});\r\ninstance.interceptors.response.use(response => response, error => {\r\n    const errRes = error.response;\r\n    if (errRes) {\r\n        if (errRes.config.url === '/account/register' && errRes.status === 400) {\r\n            swal.fire({\r\n                title: 'Error!',\r\n                text: 'Username already taken',\r\n                icon: 'error'\r\n            });\r\n        }\r\n        if (errRes.config.url === '/account/login' && [400, 401].includes(errRes.status)) {\r\n            swal.fire({\r\n                title: 'Error!',\r\n                text: 'Invalid username/password',\r\n                icon: 'error'\r\n            });\r\n        }\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport const get = async <T>(url: string) => {\r\n    const response = await instance.get<T>(url);\r\n    return response.data;\r\n};\r\nexport const post = async (url: string, data?: any) => await instance.post(url, data);","import React, { useState, useRef, useEffect } from 'react';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend'\r\nimport { swal } from '../utilities/Utilities';\r\nimport { Card, IDraggableCard } from './Card';\r\nimport { post } from '../utilities/Axios';\r\nimport TrashIcon from '../images/trash.svg';\r\n\r\ndeclare interface IColumnProps {\r\n    readonly column: IColumn;\r\n\r\n    /** determines which column is being hovered over */\r\n    readonly highlightedColumnId: number;\r\n\r\n    /** determines which card is being hovered over */\r\n    readonly highlightedCardId: number;\r\n\r\n    /** determines which card is being hovered over while NOT dragging */\r\n    readonly hoverCardId: number;\r\n\r\n    readonly dragColumnId: number;\r\n    readonly dragColumnHeight: number;\r\n    readonly dragCardId: number;\r\n    readonly dragCardHeight: number;\r\n    readonly isDragInProgress: boolean;\r\n    readonly cards: ICard[];\r\n    readonly isLoading: boolean;\r\n    readonly columnCount: number;\r\n    readonly setHoverCardId: (cardId: number) => void;\r\n    readonly setIsDragInProgress: (x: boolean) => void;\r\n    readonly setDragCardId: (cardId: number) => void;\r\n    readonly setCardHeight: (cardId: number, height: number) => void;\r\n    readonly setDragColumnId: (columnId: number) => void;\r\n    readonly setColumnHeight: (columnId: number, height: number) => void;\r\n    readonly changeColumnTitle: (columnId: number, newTitle: string) => void;\r\n    readonly setHighlightedColumnId: (id: number) => void;\r\n    readonly setHighlightedCardId: (id: number) => void;\r\n    readonly moveCard: (newCard: ICard, oldCard: ICard) => void;\r\n    readonly moveColumn: (columnId: number, newColumn: IColumn, oldBoardIndex: number) => void;\r\n    readonly getColumnsAndCards: () => Promise<void>;\r\n    readonly setIsLoading: (x: boolean) => void;\r\n}\r\n\r\nexport interface IDraggableColumn {\r\n    readonly type: string;\r\n    readonly column: IColumn;\r\n    readonly cards: ICard[];\r\n}\r\n\r\nexport function Column(props: IColumnProps) {\r\n    const textarea = useRef<any>(null);\r\n    const ref = useRef(null);\r\n    const columnRef = useRef<any>(null);\r\n\r\n    const [displayCard, setDisplayCard] = useState(false);\r\n    const [cardTitle, setCardTitle] = useState('');\r\n    const [columnTitle, setColumnTitle] = useState(props.column.title);\r\n    const [isDragging, setIsDragging] = useState(false);\r\n    const [displayDroppableLeftColumn, setDisplayDroppableLeftColumn] = useState(false);\r\n    const [displayDroppableRightColumn, setDisplayDroppableRightColumn] = useState(false);\r\n    const [columnIndex, setColumnIndex] = useState(props.cards.length);\r\n    const [invisibleColumnHeight, setInvisibleColumnHeight] = useState(0);\r\n    const [displayFirstPlaceholderCard, setDisplayFirstPlaceholderCard] = useState(false);\r\n\r\n    const columnIdAsString = props.column.id.toString();\r\n\r\n    useEffect(() => setColumnIndex(props.cards.length), [props.cards]);\r\n\r\n    useEffect(() => {\r\n        const el = document.getElementById(columnIdAsString);\r\n        if (el != null) {\r\n            const height = window.innerHeight - el.getBoundingClientRect().bottom - 40;\r\n            setInvisibleColumnHeight(height);\r\n        }\r\n    }, [columnIdAsString, props.cards]);\r\n\r\n    const sortedCards = props.cards.sort((x, y) => x.columnIndex > y.columnIndex ? 1 : -1);\r\n\r\n    const [, drag, preview] = useDrag({\r\n        item: {\r\n            type: 'column',\r\n            column: props.column,\r\n            cards: sortedCards\r\n        },\r\n        collect: monitor => {\r\n            if (monitor.isDragging()) {\r\n                if (columnRef.current != null) {\r\n                    const columnHeight = columnRef.current.clientHeight;\r\n                    props.setColumnHeight(props.column.id, columnHeight);\r\n                }\r\n                setIsDragging(true);\r\n                props.setIsDragInProgress(true);\r\n            } else {\r\n                setIsDragging(false);\r\n                setDisplayDroppableLeftColumn(false);\r\n                setDisplayDroppableRightColumn(false);\r\n                setDisplayFirstPlaceholderCard(false);\r\n            }\r\n        },\r\n        begin: () => {\r\n            props.setHighlightedColumnId(props.column.id);\r\n            props.setDragColumnId(props.column.id);\r\n        },\r\n        end: () => props.setIsDragInProgress(false)\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true });\r\n    }, [preview]);\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ['column', 'card'],\r\n        drop: (item: IDraggableColumn | IDraggableCard) => {\r\n            if (item.type === 'column') {\r\n                const col = (item as IDraggableColumn).column;\r\n                const boardIndex = displayDroppableLeftColumn === true\r\n                    ? props.column.boardIndex\r\n                    : props.column.boardIndex + 1;\r\n                let newColumn = { ...col };\r\n                newColumn = { ...newColumn, boardIndex, isNew: true };\r\n                props.moveColumn(col.id, newColumn, col.boardIndex);\r\n            }\r\n\r\n            if (item.type === 'card' && props.cards.length === 0) {\r\n                const oldCard = (item as IDraggableCard).card;\r\n                setTimeout(() => props.setHoverCardId(oldCard.id), 50);\r\n                let newCard = { ...oldCard }\r\n                newCard = { ...newCard, column_id: props.column.id, columnIndex: 0, isNew: true };\r\n                props.moveCard(newCard, oldCard);\r\n            }\r\n        },\r\n        collect: monitor => {\r\n            if (monitor.isOver() === false) {\r\n                setDisplayFirstPlaceholderCard(false)\r\n            }\r\n        },\r\n        hover: (item: IDraggableColumn | IDraggableCard, monitor) => {\r\n            if (item.type === 'column') {\r\n                if (monitor.isOver()) props.setHighlightedColumnId(props.column.id);\r\n\r\n                const initialOffset = monitor.getInitialClientOffset();\r\n                if (monitor.getClientOffset()!.x < initialOffset!.x) {\r\n                    setDisplayDroppableLeftColumn(true);\r\n                    setDisplayDroppableRightColumn(false);\r\n                }\r\n                if (monitor.getClientOffset()!.x > initialOffset!.x) {\r\n                    setDisplayDroppableRightColumn(true);\r\n                    setDisplayDroppableLeftColumn(false);\r\n                }\r\n            }\r\n\r\n            if (item.type === 'card' && props.cards.length === 0) {\r\n                setDisplayFirstPlaceholderCard(true);\r\n                props.setHighlightedCardId(0);\r\n            }\r\n\r\n            if (item.type === 'card' && props.cards.length === 1 && (item as IDraggableCard).card.column_id === props.column.id) {\r\n                props.setHighlightedCardId((item as IDraggableCard).card.id);\r\n            }\r\n        }\r\n    });\r\n\r\n    const addCard = async (title: string) => {\r\n        if (title.length > 0) {\r\n            const data = {\r\n                title,\r\n                columnId: props.column.id,\r\n                columnIndex\r\n            };\r\n            props.setIsLoading(true);\r\n            try {\r\n                await post('/cards/create', data);\r\n                await props.getColumnsAndCards();\r\n                setCardTitle('');\r\n                setColumnIndex(columnIndex + 1);\r\n            } finally {\r\n                props.setIsLoading(false);\r\n            }\r\n        }\r\n        setDisplayCard(false);\r\n    };\r\n\r\n    const handleKeyDown = (key: string) => {\r\n        if (key === 'Enter') {\r\n            textarea.current.blur();\r\n        }\r\n    };\r\n\r\n    const handleKeyDownForCard = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            addCard(cardTitle);\r\n        }\r\n    };\r\n\r\n    const removeColumn = async () => {\r\n        const response = await swal.fire({\r\n            title: 'Are you sure you want to delete this list?',\r\n            text: 'It will also delete all corresponding cards.',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, delete it!'\r\n        });\r\n        if (response.value) {\r\n            props.setIsLoading(true);\r\n            try {\r\n                await post('/columns/delete/' + props.column.id);\r\n                await props.getColumnsAndCards();\r\n                swal.fire(\r\n                    'Deleted!',\r\n                    'Your list has been deleted.',\r\n                    'success'\r\n                );\r\n            } finally {\r\n                props.setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    // allows for the Column component to be both dragged and dropped on\r\n    drag(drop(ref));\r\n\r\n    return (\r\n        <div ref={ref} className='d-flex'>\r\n            {displayDroppableLeftColumn === true && props.highlightedColumnId === props.column.id && isDragging === false &&\r\n                <div style={{ height: props.dragColumnHeight }} className='column droppable-column'></div>\r\n            }\r\n            <div>\r\n                {isDragging === false &&\r\n                    <div>\r\n                        <div id={columnIdAsString} ref={columnRef} className='column'>\r\n                            <div className='d-flex justify-content-between align-items-center mb-2'>\r\n                                <TextareaAutosize\r\n                                    type='text'\r\n                                    inputRef={textarea}\r\n                                    className='column-title'\r\n                                    value={columnTitle}\r\n                                    placeholder='Enter list title...'\r\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setColumnTitle(e.target.value)}\r\n                                    onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => handleKeyDown(e.key)}\r\n                                    onBlur={() => props.changeColumnTitle(props.column.id, columnTitle)} />\r\n                                <img\r\n                                    src={TrashIcon}\r\n                                    alt='delete icon'\r\n                                    onClick={() => removeColumn()} />\r\n                            </div>\r\n                            {sortedCards.length <= 1 && displayFirstPlaceholderCard === true &&\r\n                                <div style={{ height: props.dragCardHeight }} className='card trello-card placeholder-card'></div>\r\n                            }\r\n                            {sortedCards.map((x, i) =>\r\n                                <Card\r\n                                    key={i}\r\n                                    card={x}\r\n                                    highlightedCardId={props.highlightedCardId}\r\n                                    dragCardHeight={props.dragCardHeight}\r\n                                    dragCardId={props.dragCardId}\r\n                                    isDragInProgress={props.isDragInProgress}\r\n                                    hoverCardId={props.hoverCardId}\r\n                                    setHoverCardId={(cardId: number) => props.setHoverCardId(cardId)}\r\n                                    setIsDragInProgress={(x: boolean) => props.setIsDragInProgress(x)}\r\n                                    setDragCardId={(cardId: number) => props.setDragCardId(cardId)}\r\n                                    setCardHeight={(cardId: number, height: number) => props.setCardHeight(cardId, height)}\r\n                                    setHighlightedCardId={(id) => props.setHighlightedCardId(id)}\r\n                                    moveCard={(newCard: ICard, oldCard: ICard) => props.moveCard(newCard, oldCard)} />\r\n                            )}\r\n                            {displayCard === true &&\r\n                                <div className='card add-card'>\r\n                                    <TextareaAutosize\r\n                                        type='text'\r\n                                        autoFocus\r\n                                        className='card-input'\r\n                                        value={cardTitle}\r\n                                        placeholder='Enter a title for this card...'\r\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCardTitle(e.target.value)}\r\n                                        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => handleKeyDownForCard(e)}\r\n                                        onBlur={() => addCard(cardTitle)} />\r\n                                </div>\r\n                            }\r\n                            <button\r\n                                type='button'\r\n                                className='btn add-card-button mt-2 add-logout-btn'\r\n                                onClick={() => { if (displayCard === false) setDisplayCard(true) }}\r\n                                disabled={props.isLoading === true}>\r\n                                + Add <span>{props.cards.length === 0 ? 'a' : 'another'}</span> card\r\n                            </button>\r\n                        </div>\r\n                        {props.dragColumnId !== props.column.id && props.isDragInProgress === true &&\r\n                            <div style={{ height: invisibleColumnHeight }} className='invisible-column'></div>\r\n                        }\r\n                    </div>\r\n                }\r\n                {isDragging === true && props.highlightedColumnId === props.dragColumnId &&\r\n                    <div style={{ height: props.dragColumnHeight }} className='placeholder-column'></div>\r\n                }\r\n            </div>\r\n            {displayDroppableRightColumn === true && props.highlightedColumnId === props.column.id && isDragging === false &&\r\n                <div style={{ height: props.dragColumnHeight }} className='column droppable-column'></div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Modal } from 'react-bootstrap';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { swal } from '../utilities/Utilities';\r\nimport { Path } from '../utilities/Enums';\r\nimport { get } from '../utilities/Axios';\r\nimport TitleIcon from '../images/cardTitle.svg';\r\nimport DescriptionIcon from '../images/cardDescription.svg';\r\nimport { post } from '../utilities/Axios';\r\nimport ActionsIcon from '../images/actions.svg';\r\n\r\ndeclare interface ICardDetailsProps {\r\n    readonly isLoading: boolean;\r\n    readonly setIsLoading: (x: boolean) => void;\r\n    readonly refetchCards: () => Promise<void>;\r\n}\r\nexport function CardDetails(props: ICardDetailsProps) {\r\n    const titleTextarea = useRef<any>(null);\r\n    const descriptionTextarea = useRef<any>(null);\r\n    const { id } = useParams();\r\n    const history = useHistory();\r\n\r\n    const [card, setCard] = useState<ICard | null>(null);\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [isEditingDescription, setIsEditingDescription] = useState(false);\r\n\r\n    const getCardAndSetState = useCallback(async () => {\r\n        const card = await get<ICard>('/cards/card/' + id);\r\n        setCard(card);\r\n        setTitle(card.title);\r\n        setDescription(card.description);\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            await getCardAndSetState();\r\n        })();\r\n    }, [getCardAndSetState]);\r\n\r\n    useEffect(() => {\r\n        if (isEditingDescription === true) descriptionTextarea.current.focus();\r\n    }, [isEditingDescription]);\r\n\r\n    const handleClose = () => history.push(Path.Home);\r\n\r\n    const handleKeyDownForTitle = (key: string) => {\r\n        if (key === 'Enter') {\r\n            titleTextarea.current.blur();\r\n        }\r\n    };\r\n\r\n    const handleOnBlur = async () => {\r\n        setIsEditingDescription(false);\r\n        if (title.length === 0) return setTitle(card!.title);\r\n        const data = {\r\n            title,\r\n            description: description.replace(/\\s/g, '').length === 0\r\n                ? ''\r\n                : description \r\n        };\r\n        props.setIsLoading(true);\r\n        try {\r\n            await post('/cards/update/' + card!.id, data);\r\n            await getCardAndSetState();\r\n            await props.refetchCards();\r\n        } finally {\r\n            props.setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const removeCard = async () => {\r\n        const response = await swal.fire({\r\n            title: '',\r\n            text: 'Are you sure you want to delete this card?',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, delete it!'\r\n        });\r\n        if (response.value) {\r\n            props.setIsLoading(true);\r\n            try {\r\n                await post('/cards/delete/' + card!.id);\r\n                await props.refetchCards();\r\n                history.replace(Path.Home);\r\n            } finally {\r\n                props.setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={true} onHide={handleClose} animation={false}>\r\n            <Modal.Header className='d-flex align-items-center modal-background' closeButton>\r\n                <img src={TitleIcon} alt='title icon' />\r\n                <TextareaAutosize\r\n                    type='text'\r\n                    inputRef={titleTextarea}\r\n                    className='column-title card-details-title'\r\n                    value={title}\r\n                    placeholder='Enter list title...'\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)}\r\n                    onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => handleKeyDownForTitle(e.key)}\r\n                    onBlur={() => handleOnBlur()} />\r\n            </Modal.Header>\r\n            <Modal.Body className='modal-background'>\r\n                <div className='d-flex align-items-center'>\r\n                    <img src={DescriptionIcon} alt='description icon' />\r\n                    <span className='card-description'>Description</span>\r\n                </div>\r\n                {description.length === 0 && isEditingDescription === false &&\r\n                    <div className='no-description-placeholder' onClick={() => setIsEditingDescription(true)}>\r\n                        <span>Add a more detailed description...</span>\r\n                    </div>\r\n                }\r\n                {description.length > 0 && isEditingDescription === false &&\r\n                    <div className='description-placeholder' onClick={() => setIsEditingDescription(true)}>{description}</div>\r\n                }\r\n                {isEditingDescription === true &&\r\n                    <TextareaAutosize\r\n                        type='text'\r\n                        inputRef={descriptionTextarea}\r\n                        className='column-title card-details-textarea'\r\n                        value={description}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDescription(e.target.value)}\r\n                        onBlur={() => handleOnBlur()}\r\n                        minRows={5}\r\n                        placeholder='Add a more detailed description...' />\r\n                }\r\n                <div className='d-flex align-items-center mt-3'>\r\n                    <img src={ActionsIcon} alt='actions icon' />\r\n                    <span className='card-description'>Actions</span>\r\n                </div>\r\n                <button\r\n                    className='btn btn-danger delete-card-btn'\r\n                    disabled={props.isLoading === true}\r\n                    onClick={() => removeCard()}>\r\n                    Delete\r\n                </button>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { swal } from '../utilities/Utilities';\r\nimport { post } from '../utilities/Axios';\r\n\r\ndeclare interface ILoginSignupProps {\r\n    readonly logIn: () => void;\r\n}\r\nexport function LoginSignup(props: ILoginSignupProps) {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isLoggingIn, setIsLogginIn] = useState(true);\r\n\r\n    const isLoginDisabled = username.length === 0 || password.length === 0;\r\n    const isSignupDisabled = isLoginDisabled === true || confirmPassword.length === 0;\r\n    const isButtonDisabled = (isLoggingIn === true\r\n        ? isLoginDisabled === true\r\n        : isSignupDisabled === true)\r\n        || isLoading === true;\r\n\r\n    // cleanup\r\n    useEffect(() => { return () => setIsLoading(false) }, [isLoading]);\r\n\r\n    const logIn = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            await post('/account/login', { username, password });\r\n            props.logIn();\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async () => {\r\n        if (password.length < 6) {\r\n            return swal.fire({\r\n                title: 'Error!',\r\n                text: 'Please make sure your password is at least 6 characters',\r\n                icon: 'error'\r\n            });\r\n        }\r\n\r\n        if (password !== confirmPassword) {\r\n            return swal.fire({\r\n                title: 'Error!',\r\n                text: 'Please make sure your passwords match',\r\n                icon: 'error'\r\n            });\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            await post('/account/register', { username, password });\r\n            props.logIn();\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (key: string) => {\r\n        if (key === 'Enter' && isButtonDisabled === false) {\r\n            isLoggingIn === true ? logIn() : register();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='d-flex justify-content-center align-items-center vw-100 login-signup-container'>\r\n            <form className='login-signup-form'>\r\n                <h1 className='logged-out-logo text-center mb-5'>Kanban Lite</h1>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='text'\r\n                        className='form-control'\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}\r\n                        id='username'\r\n                        placeholder='Enter username'\r\n                        disabled={isLoading === true} />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='password'\r\n                        className='form-control'\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        id='password'\r\n                        placeholder='Password'\r\n                        disabled={isLoading === true}\r\n                        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => { if (isLoggingIn === true) handleKeyPress(e.key) }} />\r\n                </div>\r\n                {isLoggingIn === false &&\r\n                    <div className='form-group'>\r\n                        <input\r\n                            type='password'\r\n                            className='form-control'\r\n                            value={confirmPassword}\r\n                            onChange={e => setConfirmPassword(e.target.value)}\r\n                            id='confirmPassword'\r\n                            placeholder='Confirm password'\r\n                            disabled={isLoading === true}\r\n                            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => handleKeyPress(e.key)} />\r\n                    </div>\r\n                }\r\n                <button\r\n                    type='button'\r\n                    className='btn login-btn w-100'\r\n                    disabled={isButtonDisabled === true}\r\n                    onClick={() => isLoggingIn === true ? logIn() : register()}>\r\n                    {isLoggingIn === true ? 'Log In' : 'Sign Up'}\r\n                </button>\r\n                <div className='text-center mt-5'>\r\n                    {isLoggingIn === true\r\n                        ? <span className='login-question-text'>Don't have an account? <span className='login-link' onClick={() => setIsLogginIn(false)}>Sign up here</span></span>\r\n                        : <span className='login-question-text'>Already have an account? <span className='login-link' onClick={() => setIsLogginIn(true)}>Log in here</span></span>\r\n                    }\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDragLayer, XYCoord } from 'react-dnd';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { IDraggableColumn } from './Column';\r\nimport { IDraggableCard } from './Card';\r\nimport TrashIcon from '../images/trash.svg';\r\n\r\nexport const CustomDragLayer = () => {\r\n    const getItemStyles = (initialOffset: XYCoord | null, currentOffset: XYCoord | null) => {\r\n        if (!initialOffset || !currentOffset) {\r\n            return {\r\n                display: \"none\"\r\n            };\r\n        }\r\n\r\n        let { x, y } = currentOffset;\r\n\r\n        x -= initialOffset.x;\r\n        y -= initialOffset.y;\r\n        x += initialOffset.x;\r\n        y += initialOffset.y;\r\n\r\n        const transform = `translate(${x}px, ${y}px)`;\r\n        return {\r\n            transform,\r\n            WebkitTransform: transform\r\n        };\r\n    };\r\n\r\n    const {\r\n        initialOffset,\r\n        currentOffset,\r\n        item,\r\n        itemType\r\n    } = useDragLayer(monitor => ({\r\n        initialOffset: monitor.getInitialSourceClientOffset(),\r\n        currentOffset: monitor.getSourceClientOffset(),\r\n        item: monitor.getItem() as IDraggableColumn | IDraggableCard,\r\n        itemType: monitor.getItemType()\r\n    }));\r\n\r\n    const renderItem = () => {\r\n        switch (itemType) {\r\n            case 'column':\r\n                return <div className='column custom-drag-layer'>\r\n                    <div className='d-flex justify-content-between align-items-center mb-2'>\r\n                        <TextareaAutosize\r\n                            type='text'\r\n                            className='column-title'\r\n                            defaultValue={(item as IDraggableColumn).column.title}\r\n                            placeholder='Enter list title...' />\r\n                        <img src={TrashIcon} alt='delete icon' />\r\n                    </div>\r\n                    {(item as IDraggableColumn).cards.map(x => (\r\n                        <div key={x.id} className='card trello-card'>\r\n                            <span>{x.title}</span>\r\n                        </div>\r\n                    ))}\r\n                    <button\r\n                        type='button'\r\n                        className='btn add-card-button mt-2'>\r\n                        + Add <span>{(item as IDraggableColumn).cards.length === 0 ? 'a' : 'another'}</span> card\r\n                    </button>\r\n                </div>;\r\n            case 'card':\r\n                return <div className='card trello-card custom-drag-layer custom-drag-card'>\r\n                    <span>{(item as IDraggableCard).card.title}</span>\r\n                </div>;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    if (!item) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className='custom-drag-layer-container'>\r\n            <div style={getItemStyles(initialOffset, currentOffset)}>\r\n                {renderItem()}\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React, { useState, useMemo, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Column } from './components/Column';\nimport { CardDetails } from './components/CardDetails';\nimport { Path } from './utilities/Enums';\nimport { LoginSignup } from './components/LoginSignup';\nimport { get, post } from './utilities/Axios';\nimport { CustomDragLayer } from './components/CustomDragLayer';\n\ndeclare interface IAppProps {\n\treadonly isLoggedIn: boolean;\n}\nfunction App(props: IAppProps) {\n\tconst [cards, setCards] = useState<ICard[]>([]);\n\tconst [columns, setColumns] = useState<IColumn[]>([]);\n\tconst [highlightedColumnId, setHighlightedColumnId] = useState(0);\n\tconst [highlightedCardId, setHighlightedCardId] = useState(0);\n\tconst [columnIdToHeightMap, setColumnIdToHeightMap] = useState(new Map<number, number>());\n\tconst [dragColumnId, setDragColumnId] = useState(0);\n\tconst [dragCardId, setDragCardId] = useState(0);\n\tconst [cardIdToHeightMap, setCardIdToHeightMap] = useState(new Map<number, number>());\n\tconst [isDragInProgress, setIsDragInProgress] = useState(false);\n\tconst [isLoggedIn, setIsLoggedIn] = useState(props.isLoggedIn);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [hoverCardId, setHoverCardId] = useState(0);\n\n\tconst getColumnsCardsAndSetState = async () => {\n\t\tconst columns = await get<IColumn[]>('/columns');\n\t\tsetColumns(columns);\n\t\tconst colIds = columns\n\t\t\t.map(x => x.id)\n\t\t\t.join(',');\n\t\tconst cards = await get<ICard[]>('/cards?columnIds=' + colIds);\n\t\tsetCards(cards);\n\t};\n\n\tconst getColumnsAndSetState = async () => {\n\t\tconst columns = await get<IColumn[]>('/columns');\n\t\tsetColumns(columns);\n\t};\n\n\tconst getCardsAndSetState = async () => {\n\t\tconst colIds = columns\n\t\t\t.map(x => x.id)\n\t\t\t.join(',');\n\t\tconst cards = await get<ICard[]>('/cards?columnIds=' + colIds);\n\t\tsetCards(cards);\n\t};\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tif (isLoggedIn === true) {\n\t\t\t\tsetIsLoading(true);\n\t\t\t\ttry {\n\t\t\t\t\tawait getColumnsCardsAndSetState();\n\t\t\t\t} finally {\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t}, [isLoggedIn]);\n\n\tconst sortedColumns = columns.sort((x, y) => x.boardIndex > y.boardIndex ? 1 : -1);\n\n\tconst dragColumnHeight = useMemo(() => columnIdToHeightMap.get(dragColumnId)!, [columnIdToHeightMap, dragColumnId]);\n\n\tconst dragCardHeight = useMemo(() => cardIdToHeightMap.get(dragCardId)!, [cardIdToHeightMap, dragCardId]);\n\n\tconst moveCard = async (newCard: ICard, oldCard: ICard) => {\n\t\tconst clonedCards = cards.slice();\n\n\t\tconst newColumnCards = clonedCards\n\t\t\t.filter(x => x.column_id === newCard.column_id)\n\t\t\t.sort((x, y) => x.columnIndex > y.columnIndex ? 1 : -1);\n\t\tnewColumnCards.splice(newCard.columnIndex, 0, newCard);\n\t\tconst newCards = newColumnCards\n\t\t\t.filter(x => !(x.id === oldCard.id && x.columnIndex === oldCard.columnIndex && x.column_id === oldCard.column_id && !x.isNew))\n\t\t\t.map((x, i) => ({ ...x, columnIndex: i }));\n\n\t\tconst allCardsExceptOldCard = clonedCards.filter(x => !(x.id === oldCard.id && x.columnIndex === oldCard.columnIndex && x.column_id === oldCard.column_id && !x.isNew));\n\n\t\t// reset column indexes on cards in the old column\n\t\tlet resetCards: ICard[] = [];\n\t\tif (newCard.column_id !== oldCard.column_id) {\n\t\t\tresetCards = allCardsExceptOldCard\n\t\t\t\t.filter(x => x.column_id === oldCard.column_id && x.id !== oldCard.id)\n\t\t\t\t.sort((x, y) => x.columnIndex > y.columnIndex ? 1 : -1)\n\t\t\t\t.map((x, i) => ({ ...x, columnIndex: i }));\n\t\t}\n\n\t\tconst unchangedCards = allCardsExceptOldCard\n\t\t\t.filter(x => x.column_id !== newCard.column_id)\n\t\t\t.filter(x => x.column_id !== oldCard.column_id);\n\t\tsetCards(unchangedCards.concat(newCards).concat(resetCards));\n\n\t\tconst data = {\n\t\t\tcardData: newCards.concat(resetCards)\n\t\t};\n\t\tsetIsLoading(true)\n\t\ttry {\n\t\t\tawait post('/cards/move', data);\n\t\t\tawait getCardsAndSetState();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\tconst addColumn = async () => {\n\t\tconst data = {\n\t\t\ttitle: '',\n\t\t\tboardIndex: columns.length\n\t\t};\n\t\tsetIsLoading(true);\n\t\ttry {\n\t\t\tawait post('/columns/create', data);\n\t\t\tawait getColumnsAndSetState();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\tconst changeColumnTitle = async (id: number, newTitle: string) => {\n\t\tconst data = {\n\t\t\tid,\n\t\t\ttitle: newTitle\n\t\t};\n\t\tsetIsLoading(true)\n\t\ttry {\n\t\t\tawait post('/columns/update', data);\n\t\t\tawait getColumnsAndSetState();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\tconst moveColumn = async (oldColumnId: number, newColumn: IColumn, oldBoardIndex: number) => {\n\t\tconst clonedColumns = columns\n\t\t\t.slice()\n\t\t\t.sort((x, y) => x.boardIndex > y.boardIndex ? 1 : -1);\n\t\tclonedColumns.splice(newColumn.boardIndex, 0, newColumn);\n\t\tconst newColumns = clonedColumns\n\t\t\t.filter(x => !(x.id === oldColumnId && x.boardIndex === oldBoardIndex && !x.isNew))\n\t\t\t.map((x, i) => ({ ...x, boardIndex: i }));\n\t\tsetColumns(newColumns);\n\t\tlet data = {};\n\t\tfor (let i = 0; i < newColumns.length; i++) {\n\t\t\tdata = { ...data, [newColumns[i].id]: i };\n\t\t}\n\t\tsetIsLoading(true);\n\t\ttry {\n\t\t\tawait post('/columns/move', data);\n\t\t\tawait getColumnsAndSetState();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\tconst setColumnHeight = (columnId: number, height: number) => {\n\t\tconst clone = new Map(columnIdToHeightMap);\n\t\tclone.set(columnId, height);\n\t\tsetColumnIdToHeightMap(clone);\n\t};\n\n\tconst setCardHeight = (cardId: number, height: number) => {\n\t\tconst clone = new Map(cardIdToHeightMap);\n\t\tclone.set(cardId, height);\n\t\tsetCardIdToHeightMap(clone);\n\t};\n\n\tconst logout = async () => {\n\t\tsetIsLoading(true)\n\t\ttry {\n\t\t\tawait get('/account/logout');\n\t\t\tsetIsLoggedIn(false);\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Router>\n\t\t\t{isLoggedIn === true\n\t\t\t\t? <div>\n\t\t\t\t\t<div className='d-flex mt-3'>\n\t\t\t\t\t\t<h1 className='logged-in-logo'>Kanban Lite</h1>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName='btn log-out-btn add-logout-btn'\n\t\t\t\t\t\t\tonClick={() => logout()}\n\t\t\t\t\t\t\tdisabled={isLoading === true}>\n\t\t\t\t\t\t\tLog Out\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<DndProvider backend={Backend}>\n\t\t\t\t\t\t<CustomDragLayer />\n\t\t\t\t\t\t<div className='trello-container'>\n\t\t\t\t\t\t\t{sortedColumns.map(x =>\n\t\t\t\t\t\t\t\t<div key={x.id}>\n\t\t\t\t\t\t\t\t\t<Column\n\t\t\t\t\t\t\t\t\t\tcolumn={x}\n\t\t\t\t\t\t\t\t\t\thighlightedColumnId={highlightedColumnId}\n\t\t\t\t\t\t\t\t\t\thighlightedCardId={highlightedCardId}\n\t\t\t\t\t\t\t\t\t\tdragColumnId={dragColumnId}\n\t\t\t\t\t\t\t\t\t\tdragColumnHeight={dragColumnHeight}\n\t\t\t\t\t\t\t\t\t\tdragCardId={dragCardId}\n\t\t\t\t\t\t\t\t\t\tdragCardHeight={dragCardHeight}\n\t\t\t\t\t\t\t\t\t\tisDragInProgress={isDragInProgress}\n\t\t\t\t\t\t\t\t\t\tcards={cards.filter(y => y.column_id === x.id)}\n\t\t\t\t\t\t\t\t\t\thoverCardId={hoverCardId}\n\t\t\t\t\t\t\t\t\t\tcolumnCount={columns.length}\n\t\t\t\t\t\t\t\t\t\tsetHoverCardId={(cardId: number) => setHoverCardId(cardId)}\n\t\t\t\t\t\t\t\t\t\tsetIsDragInProgress={(x: boolean) => setIsDragInProgress(x)}\n\t\t\t\t\t\t\t\t\t\tsetCardHeight={(cardId: number, height: number) => setCardHeight(cardId, height)}\n\t\t\t\t\t\t\t\t\t\tsetDragCardId={(cardId: number) => setDragCardId(cardId)}\n\t\t\t\t\t\t\t\t\t\tsetDragColumnId={(columnId: number) => setDragColumnId(columnId)}\n\t\t\t\t\t\t\t\t\t\tsetColumnHeight={(columnId: number, height: number) => setColumnHeight(columnId, height)}\n\t\t\t\t\t\t\t\t\t\tchangeColumnTitle={(columnId: number, newTitle: string) => changeColumnTitle(columnId, newTitle)}\n\t\t\t\t\t\t\t\t\t\tsetHighlightedColumnId={(id: number) => setHighlightedColumnId(id)}\n\t\t\t\t\t\t\t\t\t\tsetHighlightedCardId={(id: number) => setHighlightedCardId(id)}\n\t\t\t\t\t\t\t\t\t\tmoveCard={(newCard: ICard, oldCard: ICard) => moveCard(newCard, oldCard)}\n\t\t\t\t\t\t\t\t\t\tmoveColumn={(oldColumnId: number, newColumn: IColumn, oldBoardIndex: number) => moveColumn(oldColumnId, newColumn, oldBoardIndex)}\n\t\t\t\t\t\t\t\t\t\tgetColumnsAndCards={() => getColumnsCardsAndSetState()}\n\t\t\t\t\t\t\t\t\t\tsetIsLoading={(x: boolean) => setIsLoading(x)}\n\t\t\t\t\t\t\t\t\t\tisLoading={isLoading} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\tonClick={() => addColumn()}\n\t\t\t\t\t\t\t\t\tclassName='btn add-column-button add-logout-btn'\n\t\t\t\t\t\t\t\t\tdisabled={isLoading === true}>\n\t\t\t\t\t\t\t\t\t+ Add <span>{columns.length === 0 ? 'a' : 'another'}</span> list\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DndProvider>\n\t\t\t\t</div>\n\t\t\t\t: <LoginSignup logIn={() => setIsLoggedIn(true)} />\n\t\t\t}\n\t\t\t<Route path={Path.Card}>\n\t\t\t\t<CardDetails\n\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\tsetIsLoading={(x: boolean) => setIsLoading(x)}\n\t\t\t\t\trefetchCards={() => getCardsAndSetState()} />\n\t\t\t</Route>\n\t\t</Router>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { get } from './utilities/Axios';\n\n(async () => {\n\tconst isLoggedIn = await get('/account/isLoggedIn');\n\tReactDOM.render(\n\t\t<React.StrictMode>\n\t\t\t<App isLoggedIn={isLoggedIn}></App>\n\t\t</React.StrictMode>,\n\t\tdocument.getElementById('root')\n\t);\n})();"],"sourceRoot":""}